# -*- coding: utf-8 -*-
"""CNN MNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TmcTyD5oqXHH9FtgZ4sq3npcHTMLmy9r
"""

#Import Library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load data MNIST dari TensorFlow
(X_train, y_train), (X_test, y_test) = mnist.load_data()

print("Shape X_train:", X_train.shape)
print("Shape y_train:", y_train.shape)
print("Shape X_test:", X_test.shape)
print("Shape y_test:", y_test.shape)

# Visualisasi 9 gambar pertama
plt.figure(figsize=(6,6))
for i in range(9):
    plt.subplot(3,3,i+1)
    plt.imshow(X_train[i], cmap='gray')
    plt.title(f"Label: {y_train[i]}")
    plt.axis('off')
plt.tight_layout()
plt.show()

# Distribusi label kelas pada y_train
plt.figure(figsize=(8,4))
sns.countplot(x=y_train)
plt.title("Distribusi Kelas di y_train")
plt.xlabel("Kelas (Digit 0-9)")
plt.ylabel("Jumlah")
plt.show()

# Normalisasi Nilai Piksel (0-255 → 0-1)
X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0

# Reshape Data (karena gambar grayscale)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

print("Shape baru X_train:", X_train.shape)

#  One-hot Encoding untuk Label Kelas
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

print("Contoh one-hot label y_train[0]:", y_train[0])

"""**Fungsi**"""

from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import numpy as np

def preprocess_mnist():
    # 1. Load dataset
    (X_train, y_train), (X_test, y_test) = mnist.load_data()

    # 2. Normalisasi nilai piksel ke rentang 0–1
    X_train = X_train.astype('float32') / 255.0
    X_test = X_test.astype('float32') / 255.0

    # 3. Reshape ke format (jumlah_data, tinggi, lebar, channel)
    X_train = X_train.reshape(-1, 28, 28, 1)
    X_test = X_test.reshape(-1, 28, 28, 1)

    # 4. One-hot encoding label
    y_train = to_categorical(y_train, 10)
    y_test = to_categorical(y_test, 10)

    return X_train, y_train, X_test, y_test

X_train, y_train, X_test, y_test = preprocess_mnist()

# Cek hasil
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("Contoh label one-hot:", y_train[0])

from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

def preprocess_mnist(show_summary=True):
    # 1. Load dataset
    (X_train, y_train_raw), (X_test, y_test_raw) = mnist.load_data()

    if show_summary:
        print("Original X_train shape:", X_train.shape)
        print("Original y_train shape:", y_train_raw.shape)

    # 2. Normalisasi
    X_train = X_train.astype('float32') / 255.0
    X_test = X_test.astype('float32') / 255.0

    # 3. Reshape
    X_train = X_train.reshape(-1, 28, 28, 1)
    X_test = X_test.reshape(-1, 28, 28, 1)

    # 4. One-hot encoding
    y_train = to_categorical(y_train_raw, 10)
    y_test = to_categorical(y_test_raw, 10)

    # 5. Visualisasi 9 gambar pertama
    if show_summary:
        plt.figure(figsize=(6,6))
        for i in range(9):
            plt.subplot(3,3,i+1)
            plt.imshow(X_train[i].reshape(28,28), cmap='gray')
            plt.title(f"Label: {np.argmax(y_train[i])}")
            plt.axis('off')
        plt.suptitle("Contoh Gambar MNIST")
        plt.tight_layout()
        plt.show()

    # 6. Distribusi kelas (jumlah per label)
    if show_summary:
        sns.countplot(x=y_train_raw)
        plt.title("Distribusi Jumlah Data per Kelas (0-9)")
        plt.xlabel("Digit")
        plt.ylabel("Jumlah")
        plt.show()

    return X_train, y_train, X_test, y_test

X_train, y_train, X_test, y_test = preprocess_mnist()

"""**CNN Sederhana untuk MNIST**"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

def build_mnist_cnn():
    model = Sequential([
        # Layer konvolusi pertama
        Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        MaxPooling2D((2, 2)),

        # Layer konvolusi kedua
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),

        # Flatten dan Fully Connected Layer
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),  # mencegah overfitting
        Dense(10, activation='softmax')  # output 10 kelas
    ])

    # Kompilasi model
    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

    return model

# Preprocessing data
X_train, y_train, X_test, y_test = preprocess_mnist()

# Build model CNN
model = build_mnist_cnn()

# Ringkasan model
model.summary()

# Latih model
model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.1)

# Evaluasi akurasi di data test
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Akurasi di data test: {test_acc:.4f}")

# EarlyStopping dan ModelCheckpoint
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
import matplotlib.pyplot as plt

# Early stopping dan simpan model terbaik
early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
model_checkpoint = ModelCheckpoint("best_mnist_cnn.h5", save_best_only=True)

# Training
history = model.fit(
    X_train, y_train,
    epochs=20,
    batch_size=64,
    validation_split=0.1,
    callbacks=[early_stop, model_checkpoint]
)

# Grafik akurasi
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Akurasi')
plt.xlabel('Epoch')
plt.ylabel('Akurasi')
plt.legend()

# Grafik loss
plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.tight_layout()
plt.show()

# Simpan model akhir (jika belum disimpan lewat checkpoint)
model.save("final_mnist_model.h5")

# Load kembali model
from tensorflow.keras.models import load_model
model = load_model("best_mnist_cnn.h5")

"""**Evaluasi Model CNN dengan Confusion Matrix dan Classification Report**"""

import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Prediksi kelas (dari one-hot ke label)
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

# Confusion Matrix
cm = confusion_matrix(y_true, y_pred_classes)

# Visualisasi Confusion Matrix
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt="d", cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Classification report
report = classification_report(y_true, y_pred_classes, digits=4)
print("Classification Report:\n", report)

"""**Prediksi Gambar**"""

from google.colab import files
uploaded = files.upload()

"""Preprocessing Gambar"""

import cv2
import numpy as np
from PIL import Image

# Baca file gambar
img = Image.open("angka3.jpeg").convert("L")  # Convert to grayscale
img = img.resize((28, 28))  # Resize ke 28x28

# Konversi ke array & normalisasi
img_array = np.array(img)
img_array = 255 - img_array  # Invert (background putih, tulisan hitam)
img_array = img_array / 255.0
img_array = img_array.reshape(1, 28, 28, 1)

"""Prediksi Angka"""

prediction = model.predict(img_array)
predicted_class = np.argmax(prediction)
confidence = np.max(prediction)

print(f"Prediksi angka: {predicted_class} dengan keyakinan {confidence:.4f}")

# Visualisasi Gambar & Hasil
plt.imshow(img_array.reshape(28, 28), cmap='gray')
plt.title(f"Prediksi: {predicted_class} ({confidence:.2%})")
plt.axis('off')
plt.show()